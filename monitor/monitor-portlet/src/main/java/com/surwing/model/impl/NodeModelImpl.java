package com.surwing.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.surwing.model.Node;
import com.surwing.model.NodeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Node service. Represents a row in the &quot;M_Node&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.surwing.model.NodeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NodeImpl}.
 * </p>
 *
 * @author zhaiyz
 * @see NodeImpl
 * @see com.surwing.model.Node
 * @see com.surwing.model.NodeModel
 * @generated
 */
public class NodeModelImpl extends BaseModelImpl<Node> implements NodeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a node model instance should use the {@link com.surwing.model.Node} interface instead.
     */
    public static final String TABLE_NAME = "M_Node";
    public static final Object[][] TABLE_COLUMNS = {
            { "nodeId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "nodeNo", Types.VARCHAR },
            { "locationId", Types.BIGINT },
            { "nodeType", Types.INTEGER },
            { "ip", Types.VARCHAR },
            { "lastReceivedTime", Types.TIMESTAMP },
            { "lastTransmitTime", Types.TIMESTAMP },
            { "status", Types.INTEGER },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table M_Node (nodeId LONG not null primary key,companyId LONG,groupId LONG,nodeNo VARCHAR(75) null,locationId LONG,nodeType INTEGER,ip VARCHAR(75) null,lastReceivedTime DATE null,lastTransmitTime DATE null,status INTEGER,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table M_Node";
    public static final String ORDER_BY_JPQL = " ORDER BY node.nodeId DESC";
    public static final String ORDER_BY_SQL = " ORDER BY M_Node.nodeId DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.surwing.model.Node"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.surwing.model.Node"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.surwing.model.Node"),
            true);
    public static long LOCATIONID_COLUMN_BITMASK = 1L;
    public static long NODENO_COLUMN_BITMASK = 2L;
    public static long NODEID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.surwing.model.Node"));
    private static ClassLoader _classLoader = Node.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Node.class };
    private long _nodeId;
    private long _companyId;
    private long _groupId;
    private String _nodeNo;
    private String _originalNodeNo;
    private long _locationId;
    private long _originalLocationId;
    private boolean _setOriginalLocationId;
    private int _nodeType;
    private String _ip;
    private Date _lastReceivedTime;
    private Date _lastTransmitTime;
    private int _status;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private Node _escapedModel;

    public NodeModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _nodeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setNodeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _nodeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Node.class;
    }

    @Override
    public String getModelClassName() {
        return Node.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("nodeId", getNodeId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("nodeNo", getNodeNo());
        attributes.put("locationId", getLocationId());
        attributes.put("nodeType", getNodeType());
        attributes.put("ip", getIp());
        attributes.put("lastReceivedTime", getLastReceivedTime());
        attributes.put("lastTransmitTime", getLastTransmitTime());
        attributes.put("status", getStatus());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long nodeId = (Long) attributes.get("nodeId");

        if (nodeId != null) {
            setNodeId(nodeId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        String nodeNo = (String) attributes.get("nodeNo");

        if (nodeNo != null) {
            setNodeNo(nodeNo);
        }

        Long locationId = (Long) attributes.get("locationId");

        if (locationId != null) {
            setLocationId(locationId);
        }

        Integer nodeType = (Integer) attributes.get("nodeType");

        if (nodeType != null) {
            setNodeType(nodeType);
        }

        String ip = (String) attributes.get("ip");

        if (ip != null) {
            setIp(ip);
        }

        Date lastReceivedTime = (Date) attributes.get("lastReceivedTime");

        if (lastReceivedTime != null) {
            setLastReceivedTime(lastReceivedTime);
        }

        Date lastTransmitTime = (Date) attributes.get("lastTransmitTime");

        if (lastTransmitTime != null) {
            setLastTransmitTime(lastTransmitTime);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @Override
    public long getNodeId() {
        return _nodeId;
    }

    @Override
    public void setNodeId(long nodeId) {
        _columnBitmask = -1L;

        _nodeId = nodeId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @Override
    public String getNodeNo() {
        if (_nodeNo == null) {
            return StringPool.BLANK;
        } else {
            return _nodeNo;
        }
    }

    @Override
    public void setNodeNo(String nodeNo) {
        _columnBitmask |= NODENO_COLUMN_BITMASK;

        if (_originalNodeNo == null) {
            _originalNodeNo = _nodeNo;
        }

        _nodeNo = nodeNo;
    }

    public String getOriginalNodeNo() {
        return GetterUtil.getString(_originalNodeNo);
    }

    @Override
    public long getLocationId() {
        return _locationId;
    }

    @Override
    public void setLocationId(long locationId) {
        _columnBitmask |= LOCATIONID_COLUMN_BITMASK;

        if (!_setOriginalLocationId) {
            _setOriginalLocationId = true;

            _originalLocationId = _locationId;
        }

        _locationId = locationId;
    }

    public long getOriginalLocationId() {
        return _originalLocationId;
    }

    @Override
    public int getNodeType() {
        return _nodeType;
    }

    @Override
    public void setNodeType(int nodeType) {
        _nodeType = nodeType;
    }

    @Override
    public String getIp() {
        if (_ip == null) {
            return StringPool.BLANK;
        } else {
            return _ip;
        }
    }

    @Override
    public void setIp(String ip) {
        _ip = ip;
    }

    @Override
    public Date getLastReceivedTime() {
        return _lastReceivedTime;
    }

    @Override
    public void setLastReceivedTime(Date lastReceivedTime) {
        _lastReceivedTime = lastReceivedTime;
    }

    @Override
    public Date getLastTransmitTime() {
        return _lastTransmitTime;
    }

    @Override
    public void setLastTransmitTime(Date lastTransmitTime) {
        _lastTransmitTime = lastTransmitTime;
    }

    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _status = status;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Node.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Node toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Node) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NodeImpl nodeImpl = new NodeImpl();

        nodeImpl.setNodeId(getNodeId());
        nodeImpl.setCompanyId(getCompanyId());
        nodeImpl.setGroupId(getGroupId());
        nodeImpl.setNodeNo(getNodeNo());
        nodeImpl.setLocationId(getLocationId());
        nodeImpl.setNodeType(getNodeType());
        nodeImpl.setIp(getIp());
        nodeImpl.setLastReceivedTime(getLastReceivedTime());
        nodeImpl.setLastTransmitTime(getLastTransmitTime());
        nodeImpl.setStatus(getStatus());
        nodeImpl.setCreateDate(getCreateDate());
        nodeImpl.setModifiedDate(getModifiedDate());

        nodeImpl.resetOriginalValues();

        return nodeImpl;
    }

    @Override
    public int compareTo(Node node) {
        int value = 0;

        if (getNodeId() < node.getNodeId()) {
            value = -1;
        } else if (getNodeId() > node.getNodeId()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Node)) {
            return false;
        }

        Node node = (Node) obj;

        long primaryKey = node.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        NodeModelImpl nodeModelImpl = this;

        nodeModelImpl._originalNodeNo = nodeModelImpl._nodeNo;

        nodeModelImpl._originalLocationId = nodeModelImpl._locationId;

        nodeModelImpl._setOriginalLocationId = false;

        nodeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Node> toCacheModel() {
        NodeCacheModel nodeCacheModel = new NodeCacheModel();

        nodeCacheModel.nodeId = getNodeId();

        nodeCacheModel.companyId = getCompanyId();

        nodeCacheModel.groupId = getGroupId();

        nodeCacheModel.nodeNo = getNodeNo();

        String nodeNo = nodeCacheModel.nodeNo;

        if ((nodeNo != null) && (nodeNo.length() == 0)) {
            nodeCacheModel.nodeNo = null;
        }

        nodeCacheModel.locationId = getLocationId();

        nodeCacheModel.nodeType = getNodeType();

        nodeCacheModel.ip = getIp();

        String ip = nodeCacheModel.ip;

        if ((ip != null) && (ip.length() == 0)) {
            nodeCacheModel.ip = null;
        }

        Date lastReceivedTime = getLastReceivedTime();

        if (lastReceivedTime != null) {
            nodeCacheModel.lastReceivedTime = lastReceivedTime.getTime();
        } else {
            nodeCacheModel.lastReceivedTime = Long.MIN_VALUE;
        }

        Date lastTransmitTime = getLastTransmitTime();

        if (lastTransmitTime != null) {
            nodeCacheModel.lastTransmitTime = lastTransmitTime.getTime();
        } else {
            nodeCacheModel.lastTransmitTime = Long.MIN_VALUE;
        }

        nodeCacheModel.status = getStatus();

        Date createDate = getCreateDate();

        if (createDate != null) {
            nodeCacheModel.createDate = createDate.getTime();
        } else {
            nodeCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            nodeCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            nodeCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return nodeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{nodeId=");
        sb.append(getNodeId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", nodeNo=");
        sb.append(getNodeNo());
        sb.append(", locationId=");
        sb.append(getLocationId());
        sb.append(", nodeType=");
        sb.append(getNodeType());
        sb.append(", ip=");
        sb.append(getIp());
        sb.append(", lastReceivedTime=");
        sb.append(getLastReceivedTime());
        sb.append(", lastTransmitTime=");
        sb.append(getLastTransmitTime());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.surwing.model.Node");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>nodeId</column-name><column-value><![CDATA[");
        sb.append(getNodeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nodeNo</column-name><column-value><![CDATA[");
        sb.append(getNodeNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>locationId</column-name><column-value><![CDATA[");
        sb.append(getLocationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nodeType</column-name><column-value><![CDATA[");
        sb.append(getNodeType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ip</column-name><column-value><![CDATA[");
        sb.append(getIp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastReceivedTime</column-name><column-value><![CDATA[");
        sb.append(getLastReceivedTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastTransmitTime</column-name><column-value><![CDATA[");
        sb.append(getLastTransmitTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
