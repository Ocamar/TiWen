package com.surwing.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.surwing.model.Bed;
import com.surwing.model.BedModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Bed service. Represents a row in the &quot;M_Bed&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.surwing.model.BedModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BedImpl}.
 * </p>
 *
 * @author zhaiyz
 * @see BedImpl
 * @see com.surwing.model.Bed
 * @see com.surwing.model.BedModel
 * @generated
 */
public class BedModelImpl extends BaseModelImpl<Bed> implements BedModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a bed model instance should use the {@link com.surwing.model.Bed} interface instead.
     */
    public static final String TABLE_NAME = "M_Bed";
    public static final Object[][] TABLE_COLUMNS = {
            { "bedId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "locationId", Types.BIGINT },
            { "bedNo", Types.VARCHAR },
            { "alias_", Types.VARCHAR },
            { "patientId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table M_Bed (bedId LONG not null primary key,companyId LONG,groupId LONG,locationId LONG,bedNo VARCHAR(75) null,alias_ VARCHAR(75) null,patientId LONG,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table M_Bed";
    public static final String ORDER_BY_JPQL = " ORDER BY bed.bedId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY M_Bed.bedId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.surwing.model.Bed"), true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.surwing.model.Bed"), true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.surwing.model.Bed"),
            true);
    public static long BEDNO_COLUMN_BITMASK = 1L;
    public static long LOCATIONID_COLUMN_BITMASK = 2L;
    public static long BEDID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.surwing.model.Bed"));
    private static ClassLoader _classLoader = Bed.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Bed.class };
    private long _bedId;
    private long _companyId;
    private long _groupId;
    private long _locationId;
    private long _originalLocationId;
    private boolean _setOriginalLocationId;
    private String _bedNo;
    private String _originalBedNo;
    private String _alias;
    private long _patientId;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private Bed _escapedModel;

    public BedModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _bedId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setBedId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _bedId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Bed.class;
    }

    @Override
    public String getModelClassName() {
        return Bed.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("bedId", getBedId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("locationId", getLocationId());
        attributes.put("bedNo", getBedNo());
        attributes.put("alias", getAlias());
        attributes.put("patientId", getPatientId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long bedId = (Long) attributes.get("bedId");

        if (bedId != null) {
            setBedId(bedId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long locationId = (Long) attributes.get("locationId");

        if (locationId != null) {
            setLocationId(locationId);
        }

        String bedNo = (String) attributes.get("bedNo");

        if (bedNo != null) {
            setBedNo(bedNo);
        }

        String alias = (String) attributes.get("alias");

        if (alias != null) {
            setAlias(alias);
        }

        Long patientId = (Long) attributes.get("patientId");

        if (patientId != null) {
            setPatientId(patientId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @Override
    public long getBedId() {
        return _bedId;
    }

    @Override
    public void setBedId(long bedId) {
        _bedId = bedId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @Override
    public long getLocationId() {
        return _locationId;
    }

    @Override
    public void setLocationId(long locationId) {
        _columnBitmask |= LOCATIONID_COLUMN_BITMASK;

        if (!_setOriginalLocationId) {
            _setOriginalLocationId = true;

            _originalLocationId = _locationId;
        }

        _locationId = locationId;
    }

    public long getOriginalLocationId() {
        return _originalLocationId;
    }

    @Override
    public String getBedNo() {
        if (_bedNo == null) {
            return StringPool.BLANK;
        } else {
            return _bedNo;
        }
    }

    @Override
    public void setBedNo(String bedNo) {
        _columnBitmask |= BEDNO_COLUMN_BITMASK;

        if (_originalBedNo == null) {
            _originalBedNo = _bedNo;
        }

        _bedNo = bedNo;
    }

    public String getOriginalBedNo() {
        return GetterUtil.getString(_originalBedNo);
    }

    @Override
    public String getAlias() {
        if (_alias == null) {
            return StringPool.BLANK;
        } else {
            return _alias;
        }
    }

    @Override
    public void setAlias(String alias) {
        _alias = alias;
    }

    @Override
    public long getPatientId() {
        return _patientId;
    }

    @Override
    public void setPatientId(long patientId) {
        _patientId = patientId;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Bed.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Bed toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Bed) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BedImpl bedImpl = new BedImpl();

        bedImpl.setBedId(getBedId());
        bedImpl.setCompanyId(getCompanyId());
        bedImpl.setGroupId(getGroupId());
        bedImpl.setLocationId(getLocationId());
        bedImpl.setBedNo(getBedNo());
        bedImpl.setAlias(getAlias());
        bedImpl.setPatientId(getPatientId());
        bedImpl.setCreateDate(getCreateDate());
        bedImpl.setModifiedDate(getModifiedDate());

        bedImpl.resetOriginalValues();

        return bedImpl;
    }

    @Override
    public int compareTo(Bed bed) {
        long primaryKey = bed.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Bed)) {
            return false;
        }

        Bed bed = (Bed) obj;

        long primaryKey = bed.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        BedModelImpl bedModelImpl = this;

        bedModelImpl._originalLocationId = bedModelImpl._locationId;

        bedModelImpl._setOriginalLocationId = false;

        bedModelImpl._originalBedNo = bedModelImpl._bedNo;

        bedModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Bed> toCacheModel() {
        BedCacheModel bedCacheModel = new BedCacheModel();

        bedCacheModel.bedId = getBedId();

        bedCacheModel.companyId = getCompanyId();

        bedCacheModel.groupId = getGroupId();

        bedCacheModel.locationId = getLocationId();

        bedCacheModel.bedNo = getBedNo();

        String bedNo = bedCacheModel.bedNo;

        if ((bedNo != null) && (bedNo.length() == 0)) {
            bedCacheModel.bedNo = null;
        }

        bedCacheModel.alias = getAlias();

        String alias = bedCacheModel.alias;

        if ((alias != null) && (alias.length() == 0)) {
            bedCacheModel.alias = null;
        }

        bedCacheModel.patientId = getPatientId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            bedCacheModel.createDate = createDate.getTime();
        } else {
            bedCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            bedCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            bedCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return bedCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{bedId=");
        sb.append(getBedId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", locationId=");
        sb.append(getLocationId());
        sb.append(", bedNo=");
        sb.append(getBedNo());
        sb.append(", alias=");
        sb.append(getAlias());
        sb.append(", patientId=");
        sb.append(getPatientId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.surwing.model.Bed");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>bedId</column-name><column-value><![CDATA[");
        sb.append(getBedId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>locationId</column-name><column-value><![CDATA[");
        sb.append(getLocationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bedNo</column-name><column-value><![CDATA[");
        sb.append(getBedNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>alias</column-name><column-value><![CDATA[");
        sb.append(getAlias());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patientId</column-name><column-value><![CDATA[");
        sb.append(getPatientId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
