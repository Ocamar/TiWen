package com.surwing.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.surwing.model.Temperature;
import com.surwing.model.TemperatureModel;

import java.io.Serializable;

import java.math.BigDecimal;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Temperature service. Represents a row in the &quot;M_Temperature&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.surwing.model.TemperatureModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TemperatureImpl}.
 * </p>
 *
 * @author zhaiyz
 * @see TemperatureImpl
 * @see com.surwing.model.Temperature
 * @see com.surwing.model.TemperatureModel
 * @generated
 */
public class TemperatureModelImpl extends BaseModelImpl<Temperature>
    implements TemperatureModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a temperature model instance should use the {@link com.surwing.model.Temperature} interface instead.
     */
    public static final String TABLE_NAME = "M_Temperature";
    public static final Object[][] TABLE_COLUMNS = {
            { "temperatureId", Types.BIGINT },
            { "patientId", Types.BIGINT },
            { "temperature", Types.DECIMAL },
            { "createDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table M_Temperature (temperatureId LONG not null primary key,patientId LONG,temperature DECIMAL(12,2) null,createDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table M_Temperature";
    public static final String ORDER_BY_JPQL = " ORDER BY temperature.temperatureId DESC";
    public static final String ORDER_BY_SQL = " ORDER BY M_Temperature.temperatureId DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.surwing.model.Temperature"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.surwing.model.Temperature"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.surwing.model.Temperature"));
    private static ClassLoader _classLoader = Temperature.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Temperature.class
        };
    private long _temperatureId;
    private long _patientId;
    private BigDecimal _temperature;
    private Date _createDate;
    private Temperature _escapedModel;

    public TemperatureModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _temperatureId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setTemperatureId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _temperatureId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Temperature.class;
    }

    @Override
    public String getModelClassName() {
        return Temperature.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("temperatureId", getTemperatureId());
        attributes.put("patientId", getPatientId());
        attributes.put("temperature", getTemperature());
        attributes.put("createDate", getCreateDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long temperatureId = (Long) attributes.get("temperatureId");

        if (temperatureId != null) {
            setTemperatureId(temperatureId);
        }

        Long patientId = (Long) attributes.get("patientId");

        if (patientId != null) {
            setPatientId(patientId);
        }

        BigDecimal temperature = (BigDecimal) attributes.get("temperature");

        if (temperature != null) {
            setTemperature(temperature);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }
    }

    @Override
    public long getTemperatureId() {
        return _temperatureId;
    }

    @Override
    public void setTemperatureId(long temperatureId) {
        _temperatureId = temperatureId;
    }

    @Override
    public long getPatientId() {
        return _patientId;
    }

    @Override
    public void setPatientId(long patientId) {
        _patientId = patientId;
    }

    @Override
    public BigDecimal getTemperature() {
        return _temperature;
    }

    @Override
    public void setTemperature(BigDecimal temperature) {
        _temperature = temperature;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Temperature.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Temperature toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Temperature) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TemperatureImpl temperatureImpl = new TemperatureImpl();

        temperatureImpl.setTemperatureId(getTemperatureId());
        temperatureImpl.setPatientId(getPatientId());
        temperatureImpl.setTemperature(getTemperature());
        temperatureImpl.setCreateDate(getCreateDate());

        temperatureImpl.resetOriginalValues();

        return temperatureImpl;
    }

    @Override
    public int compareTo(Temperature temperature) {
        int value = 0;

        if (getTemperatureId() < temperature.getTemperatureId()) {
            value = -1;
        } else if (getTemperatureId() > temperature.getTemperatureId()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Temperature)) {
            return false;
        }

        Temperature temperature = (Temperature) obj;

        long primaryKey = temperature.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Temperature> toCacheModel() {
        TemperatureCacheModel temperatureCacheModel = new TemperatureCacheModel();

        temperatureCacheModel.temperatureId = getTemperatureId();

        temperatureCacheModel.patientId = getPatientId();

        temperatureCacheModel.temperature = getTemperature();

        Date createDate = getCreateDate();

        if (createDate != null) {
            temperatureCacheModel.createDate = createDate.getTime();
        } else {
            temperatureCacheModel.createDate = Long.MIN_VALUE;
        }

        return temperatureCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{temperatureId=");
        sb.append(getTemperatureId());
        sb.append(", patientId=");
        sb.append(getPatientId());
        sb.append(", temperature=");
        sb.append(getTemperature());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.surwing.model.Temperature");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>temperatureId</column-name><column-value><![CDATA[");
        sb.append(getTemperatureId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patientId</column-name><column-value><![CDATA[");
        sb.append(getPatientId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>temperature</column-name><column-value><![CDATA[");
        sb.append(getTemperature());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
