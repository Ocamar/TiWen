package com.surwing.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.surwing.model.Tag;
import com.surwing.model.TagModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Tag service. Represents a row in the &quot;M_Tag&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.surwing.model.TagModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TagImpl}.
 * </p>
 *
 * @author zhaiyz
 * @see TagImpl
 * @see com.surwing.model.Tag
 * @see com.surwing.model.TagModel
 * @generated
 */
public class TagModelImpl extends BaseModelImpl<Tag> implements TagModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a tag model instance should use the {@link com.surwing.model.Tag} interface instead.
     */
    public static final String TABLE_NAME = "M_Tag";
    public static final Object[][] TABLE_COLUMNS = {
            { "tagId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "tagNo", Types.VARCHAR },
            { "type_", Types.INTEGER },
            { "nodeId", Types.BIGINT },
            { "locationId", Types.BIGINT },
            { "status", Types.INTEGER },
            { "patientId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table M_Tag (tagId LONG not null primary key,companyId LONG,groupId LONG,tagNo VARCHAR(75) null,type_ INTEGER,nodeId LONG,locationId LONG,status INTEGER,patientId LONG,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table M_Tag";
    public static final String ORDER_BY_JPQL = " ORDER BY tag.tagId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY M_Tag.tagId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.surwing.model.Tag"), true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.surwing.model.Tag"), true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.surwing.model.Tag"),
            true);
    public static long TAGNO_COLUMN_BITMASK = 1L;
    public static long TAGID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.surwing.model.Tag"));
    private static ClassLoader _classLoader = Tag.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Tag.class };
    private long _tagId;
    private long _companyId;
    private long _groupId;
    private String _tagNo;
    private String _originalTagNo;
    private int _type;
    private long _nodeId;
    private long _locationId;
    private int _status;
    private long _patientId;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private Tag _escapedModel;

    public TagModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _tagId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setTagId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _tagId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Tag.class;
    }

    @Override
    public String getModelClassName() {
        return Tag.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("tagId", getTagId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("tagNo", getTagNo());
        attributes.put("type", getType());
        attributes.put("nodeId", getNodeId());
        attributes.put("locationId", getLocationId());
        attributes.put("status", getStatus());
        attributes.put("patientId", getPatientId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long tagId = (Long) attributes.get("tagId");

        if (tagId != null) {
            setTagId(tagId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        String tagNo = (String) attributes.get("tagNo");

        if (tagNo != null) {
            setTagNo(tagNo);
        }

        Integer type = (Integer) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        Long nodeId = (Long) attributes.get("nodeId");

        if (nodeId != null) {
            setNodeId(nodeId);
        }

        Long locationId = (Long) attributes.get("locationId");

        if (locationId != null) {
            setLocationId(locationId);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Long patientId = (Long) attributes.get("patientId");

        if (patientId != null) {
            setPatientId(patientId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @Override
    public long getTagId() {
        return _tagId;
    }

    @Override
    public void setTagId(long tagId) {
        _tagId = tagId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @Override
    public String getTagNo() {
        if (_tagNo == null) {
            return StringPool.BLANK;
        } else {
            return _tagNo;
        }
    }

    @Override
    public void setTagNo(String tagNo) {
        _columnBitmask |= TAGNO_COLUMN_BITMASK;

        if (_originalTagNo == null) {
            _originalTagNo = _tagNo;
        }

        _tagNo = tagNo;
    }

    public String getOriginalTagNo() {
        return GetterUtil.getString(_originalTagNo);
    }

    @Override
    public int getType() {
        return _type;
    }

    @Override
    public void setType(int type) {
        _type = type;
    }

    @Override
    public long getNodeId() {
        return _nodeId;
    }

    @Override
    public void setNodeId(long nodeId) {
        _nodeId = nodeId;
    }

    @Override
    public long getLocationId() {
        return _locationId;
    }

    @Override
    public void setLocationId(long locationId) {
        _locationId = locationId;
    }

    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _status = status;
    }

    @Override
    public long getPatientId() {
        return _patientId;
    }

    @Override
    public void setPatientId(long patientId) {
        _patientId = patientId;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Tag.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Tag toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Tag) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TagImpl tagImpl = new TagImpl();

        tagImpl.setTagId(getTagId());
        tagImpl.setCompanyId(getCompanyId());
        tagImpl.setGroupId(getGroupId());
        tagImpl.setTagNo(getTagNo());
        tagImpl.setType(getType());
        tagImpl.setNodeId(getNodeId());
        tagImpl.setLocationId(getLocationId());
        tagImpl.setStatus(getStatus());
        tagImpl.setPatientId(getPatientId());
        tagImpl.setCreateDate(getCreateDate());
        tagImpl.setModifiedDate(getModifiedDate());

        tagImpl.resetOriginalValues();

        return tagImpl;
    }

    @Override
    public int compareTo(Tag tag) {
        long primaryKey = tag.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Tag)) {
            return false;
        }

        Tag tag = (Tag) obj;

        long primaryKey = tag.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        TagModelImpl tagModelImpl = this;

        tagModelImpl._originalTagNo = tagModelImpl._tagNo;

        tagModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Tag> toCacheModel() {
        TagCacheModel tagCacheModel = new TagCacheModel();

        tagCacheModel.tagId = getTagId();

        tagCacheModel.companyId = getCompanyId();

        tagCacheModel.groupId = getGroupId();

        tagCacheModel.tagNo = getTagNo();

        String tagNo = tagCacheModel.tagNo;

        if ((tagNo != null) && (tagNo.length() == 0)) {
            tagCacheModel.tagNo = null;
        }

        tagCacheModel.type = getType();

        tagCacheModel.nodeId = getNodeId();

        tagCacheModel.locationId = getLocationId();

        tagCacheModel.status = getStatus();

        tagCacheModel.patientId = getPatientId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            tagCacheModel.createDate = createDate.getTime();
        } else {
            tagCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            tagCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            tagCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return tagCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(23);

        sb.append("{tagId=");
        sb.append(getTagId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", tagNo=");
        sb.append(getTagNo());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", nodeId=");
        sb.append(getNodeId());
        sb.append(", locationId=");
        sb.append(getLocationId());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", patientId=");
        sb.append(getPatientId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(37);

        sb.append("<model><model-name>");
        sb.append("com.surwing.model.Tag");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>tagId</column-name><column-value><![CDATA[");
        sb.append(getTagId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tagNo</column-name><column-value><![CDATA[");
        sb.append(getTagNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nodeId</column-name><column-value><![CDATA[");
        sb.append(getNodeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>locationId</column-name><column-value><![CDATA[");
        sb.append(getLocationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patientId</column-name><column-value><![CDATA[");
        sb.append(getPatientId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
