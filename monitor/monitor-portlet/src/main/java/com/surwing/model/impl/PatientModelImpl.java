package com.surwing.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.surwing.model.Patient;
import com.surwing.model.PatientModel;

import java.io.Serializable;

import java.math.BigDecimal;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Patient service. Represents a row in the &quot;M_Patient&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.surwing.model.PatientModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PatientImpl}.
 * </p>
 *
 * @author zhaiyz
 * @see PatientImpl
 * @see com.surwing.model.Patient
 * @see com.surwing.model.PatientModel
 * @generated
 */
public class PatientModelImpl extends BaseModelImpl<Patient>
    implements PatientModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a patient model instance should use the {@link com.surwing.model.Patient} interface instead.
     */
    public static final String TABLE_NAME = "M_Patient";
    public static final Object[][] TABLE_COLUMNS = {
            { "patientId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "mrn", Types.VARCHAR },
            { "name", Types.VARCHAR },
            { "locationId", Types.BIGINT },
            { "bedId", Types.BIGINT },
            { "gender", Types.INTEGER },
            { "birthday", Types.TIMESTAMP },
            { "minTemperature", Types.DECIMAL },
            { "maxTemperature", Types.DECIMAL },
            { "tagNo", Types.VARCHAR },
            { "temperature", Types.DECIMAL },
            { "latestDate", Types.TIMESTAMP },
            { "temperatureIn8h", Types.DECIMAL },
            { "highestDate", Types.TIMESTAMP },
            { "febrile", Types.BOOLEAN },
            { "alarmLevel", Types.DECIMAL },
            { "discharge", Types.BOOLEAN },
            { "deleted", Types.BOOLEAN },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table M_Patient (patientId LONG not null primary key,companyId LONG,groupId LONG,mrn VARCHAR(75) null,name VARCHAR(75) null,locationId LONG,bedId LONG,gender INTEGER,birthday DATE null,minTemperature DECIMAL(12,2) null,maxTemperature DECIMAL(12,2) null,tagNo VARCHAR(75) null,temperature DECIMAL(12,2) null,latestDate DATE null,temperatureIn8h DECIMAL(12,2) null,highestDate DATE null,febrile BOOLEAN,alarmLevel DECIMAL(12,2) null,discharge BOOLEAN,deleted BOOLEAN,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table M_Patient";
    public static final String ORDER_BY_JPQL = " ORDER BY patient.patientId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY M_Patient.patientId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.surwing.model.Patient"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.surwing.model.Patient"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.surwing.model.Patient"),
            true);
    public static long DELETED_COLUMN_BITMASK = 1L;
    public static long DISCHARGE_COLUMN_BITMASK = 2L;
    public static long FEBRILE_COLUMN_BITMASK = 4L;
    public static long MRN_COLUMN_BITMASK = 8L;
    public static long PATIENTID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.surwing.model.Patient"));
    private static ClassLoader _classLoader = Patient.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Patient.class
        };
    private long _patientId;
    private long _companyId;
    private long _groupId;
    private String _mrn;
    private String _originalMrn;
    private String _name;
    private long _locationId;
    private long _bedId;
    private int _gender;
    private Date _birthday;
    private BigDecimal _minTemperature;
    private BigDecimal _maxTemperature;
    private String _tagNo;
    private BigDecimal _temperature;
    private Date _latestDate;
    private BigDecimal _temperatureIn8h;
    private Date _highestDate;
    private boolean _febrile;
    private boolean _originalFebrile;
    private boolean _setOriginalFebrile;
    private BigDecimal _alarmLevel;
    private boolean _discharge;
    private boolean _originalDischarge;
    private boolean _setOriginalDischarge;
    private boolean _deleted;
    private boolean _originalDeleted;
    private boolean _setOriginalDeleted;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private Patient _escapedModel;

    public PatientModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _patientId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPatientId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _patientId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Patient.class;
    }

    @Override
    public String getModelClassName() {
        return Patient.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("patientId", getPatientId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("mrn", getMrn());
        attributes.put("name", getName());
        attributes.put("locationId", getLocationId());
        attributes.put("bedId", getBedId());
        attributes.put("gender", getGender());
        attributes.put("birthday", getBirthday());
        attributes.put("minTemperature", getMinTemperature());
        attributes.put("maxTemperature", getMaxTemperature());
        attributes.put("tagNo", getTagNo());
        attributes.put("temperature", getTemperature());
        attributes.put("latestDate", getLatestDate());
        attributes.put("temperatureIn8h", getTemperatureIn8h());
        attributes.put("highestDate", getHighestDate());
        attributes.put("febrile", getFebrile());
        attributes.put("alarmLevel", getAlarmLevel());
        attributes.put("discharge", getDischarge());
        attributes.put("deleted", getDeleted());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long patientId = (Long) attributes.get("patientId");

        if (patientId != null) {
            setPatientId(patientId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        String mrn = (String) attributes.get("mrn");

        if (mrn != null) {
            setMrn(mrn);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Long locationId = (Long) attributes.get("locationId");

        if (locationId != null) {
            setLocationId(locationId);
        }

        Long bedId = (Long) attributes.get("bedId");

        if (bedId != null) {
            setBedId(bedId);
        }

        Integer gender = (Integer) attributes.get("gender");

        if (gender != null) {
            setGender(gender);
        }

        Date birthday = (Date) attributes.get("birthday");

        if (birthday != null) {
            setBirthday(birthday);
        }

        BigDecimal minTemperature = (BigDecimal) attributes.get(
                "minTemperature");

        if (minTemperature != null) {
            setMinTemperature(minTemperature);
        }

        BigDecimal maxTemperature = (BigDecimal) attributes.get(
                "maxTemperature");

        if (maxTemperature != null) {
            setMaxTemperature(maxTemperature);
        }

        String tagNo = (String) attributes.get("tagNo");

        if (tagNo != null) {
            setTagNo(tagNo);
        }

        BigDecimal temperature = (BigDecimal) attributes.get("temperature");

        if (temperature != null) {
            setTemperature(temperature);
        }

        Date latestDate = (Date) attributes.get("latestDate");

        if (latestDate != null) {
            setLatestDate(latestDate);
        }

        BigDecimal temperatureIn8h = (BigDecimal) attributes.get(
                "temperatureIn8h");

        if (temperatureIn8h != null) {
            setTemperatureIn8h(temperatureIn8h);
        }

        Date highestDate = (Date) attributes.get("highestDate");

        if (highestDate != null) {
            setHighestDate(highestDate);
        }

        Boolean febrile = (Boolean) attributes.get("febrile");

        if (febrile != null) {
            setFebrile(febrile);
        }

        BigDecimal alarmLevel = (BigDecimal) attributes.get("alarmLevel");

        if (alarmLevel != null) {
            setAlarmLevel(alarmLevel);
        }

        Boolean discharge = (Boolean) attributes.get("discharge");

        if (discharge != null) {
            setDischarge(discharge);
        }

        Boolean deleted = (Boolean) attributes.get("deleted");

        if (deleted != null) {
            setDeleted(deleted);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @Override
    public long getPatientId() {
        return _patientId;
    }

    @Override
    public void setPatientId(long patientId) {
        _patientId = patientId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @Override
    public String getMrn() {
        if (_mrn == null) {
            return StringPool.BLANK;
        } else {
            return _mrn;
        }
    }

    @Override
    public void setMrn(String mrn) {
        _columnBitmask |= MRN_COLUMN_BITMASK;

        if (_originalMrn == null) {
            _originalMrn = _mrn;
        }

        _mrn = mrn;
    }

    public String getOriginalMrn() {
        return GetterUtil.getString(_originalMrn);
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public long getLocationId() {
        return _locationId;
    }

    @Override
    public void setLocationId(long locationId) {
        _locationId = locationId;
    }

    @Override
    public long getBedId() {
        return _bedId;
    }

    @Override
    public void setBedId(long bedId) {
        _bedId = bedId;
    }

    @Override
    public int getGender() {
        return _gender;
    }

    @Override
    public void setGender(int gender) {
        _gender = gender;
    }

    @Override
    public Date getBirthday() {
        return _birthday;
    }

    @Override
    public void setBirthday(Date birthday) {
        _birthday = birthday;
    }

    @Override
    public BigDecimal getMinTemperature() {
        return _minTemperature;
    }

    @Override
    public void setMinTemperature(BigDecimal minTemperature) {
        _minTemperature = minTemperature;
    }

    @Override
    public BigDecimal getMaxTemperature() {
        return _maxTemperature;
    }

    @Override
    public void setMaxTemperature(BigDecimal maxTemperature) {
        _maxTemperature = maxTemperature;
    }

    @Override
    public String getTagNo() {
        if (_tagNo == null) {
            return StringPool.BLANK;
        } else {
            return _tagNo;
        }
    }

    @Override
    public void setTagNo(String tagNo) {
        _tagNo = tagNo;
    }

    @Override
    public BigDecimal getTemperature() {
        return _temperature;
    }

    @Override
    public void setTemperature(BigDecimal temperature) {
        _temperature = temperature;
    }

    @Override
    public Date getLatestDate() {
        return _latestDate;
    }

    @Override
    public void setLatestDate(Date latestDate) {
        _latestDate = latestDate;
    }

    @Override
    public BigDecimal getTemperatureIn8h() {
        return _temperatureIn8h;
    }

    @Override
    public void setTemperatureIn8h(BigDecimal temperatureIn8h) {
        _temperatureIn8h = temperatureIn8h;
    }

    @Override
    public Date getHighestDate() {
        return _highestDate;
    }

    @Override
    public void setHighestDate(Date highestDate) {
        _highestDate = highestDate;
    }

    @Override
    public boolean getFebrile() {
        return _febrile;
    }

    @Override
    public boolean isFebrile() {
        return _febrile;
    }

    @Override
    public void setFebrile(boolean febrile) {
        _columnBitmask |= FEBRILE_COLUMN_BITMASK;

        if (!_setOriginalFebrile) {
            _setOriginalFebrile = true;

            _originalFebrile = _febrile;
        }

        _febrile = febrile;
    }

    public boolean getOriginalFebrile() {
        return _originalFebrile;
    }

    @Override
    public BigDecimal getAlarmLevel() {
        return _alarmLevel;
    }

    @Override
    public void setAlarmLevel(BigDecimal alarmLevel) {
        _alarmLevel = alarmLevel;
    }

    @Override
    public boolean getDischarge() {
        return _discharge;
    }

    @Override
    public boolean isDischarge() {
        return _discharge;
    }

    @Override
    public void setDischarge(boolean discharge) {
        _columnBitmask |= DISCHARGE_COLUMN_BITMASK;

        if (!_setOriginalDischarge) {
            _setOriginalDischarge = true;

            _originalDischarge = _discharge;
        }

        _discharge = discharge;
    }

    public boolean getOriginalDischarge() {
        return _originalDischarge;
    }

    @Override
    public boolean getDeleted() {
        return _deleted;
    }

    @Override
    public boolean isDeleted() {
        return _deleted;
    }

    @Override
    public void setDeleted(boolean deleted) {
        _columnBitmask |= DELETED_COLUMN_BITMASK;

        if (!_setOriginalDeleted) {
            _setOriginalDeleted = true;

            _originalDeleted = _deleted;
        }

        _deleted = deleted;
    }

    public boolean getOriginalDeleted() {
        return _originalDeleted;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Patient.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Patient toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Patient) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PatientImpl patientImpl = new PatientImpl();

        patientImpl.setPatientId(getPatientId());
        patientImpl.setCompanyId(getCompanyId());
        patientImpl.setGroupId(getGroupId());
        patientImpl.setMrn(getMrn());
        patientImpl.setName(getName());
        patientImpl.setLocationId(getLocationId());
        patientImpl.setBedId(getBedId());
        patientImpl.setGender(getGender());
        patientImpl.setBirthday(getBirthday());
        patientImpl.setMinTemperature(getMinTemperature());
        patientImpl.setMaxTemperature(getMaxTemperature());
        patientImpl.setTagNo(getTagNo());
        patientImpl.setTemperature(getTemperature());
        patientImpl.setLatestDate(getLatestDate());
        patientImpl.setTemperatureIn8h(getTemperatureIn8h());
        patientImpl.setHighestDate(getHighestDate());
        patientImpl.setFebrile(getFebrile());
        patientImpl.setAlarmLevel(getAlarmLevel());
        patientImpl.setDischarge(getDischarge());
        patientImpl.setDeleted(getDeleted());
        patientImpl.setCreateDate(getCreateDate());
        patientImpl.setModifiedDate(getModifiedDate());

        patientImpl.resetOriginalValues();

        return patientImpl;
    }

    @Override
    public int compareTo(Patient patient) {
        long primaryKey = patient.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Patient)) {
            return false;
        }

        Patient patient = (Patient) obj;

        long primaryKey = patient.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PatientModelImpl patientModelImpl = this;

        patientModelImpl._originalMrn = patientModelImpl._mrn;

        patientModelImpl._originalFebrile = patientModelImpl._febrile;

        patientModelImpl._setOriginalFebrile = false;

        patientModelImpl._originalDischarge = patientModelImpl._discharge;

        patientModelImpl._setOriginalDischarge = false;

        patientModelImpl._originalDeleted = patientModelImpl._deleted;

        patientModelImpl._setOriginalDeleted = false;

        patientModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Patient> toCacheModel() {
        PatientCacheModel patientCacheModel = new PatientCacheModel();

        patientCacheModel.patientId = getPatientId();

        patientCacheModel.companyId = getCompanyId();

        patientCacheModel.groupId = getGroupId();

        patientCacheModel.mrn = getMrn();

        String mrn = patientCacheModel.mrn;

        if ((mrn != null) && (mrn.length() == 0)) {
            patientCacheModel.mrn = null;
        }

        patientCacheModel.name = getName();

        String name = patientCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            patientCacheModel.name = null;
        }

        patientCacheModel.locationId = getLocationId();

        patientCacheModel.bedId = getBedId();

        patientCacheModel.gender = getGender();

        Date birthday = getBirthday();

        if (birthday != null) {
            patientCacheModel.birthday = birthday.getTime();
        } else {
            patientCacheModel.birthday = Long.MIN_VALUE;
        }

        patientCacheModel.minTemperature = getMinTemperature();

        patientCacheModel.maxTemperature = getMaxTemperature();

        patientCacheModel.tagNo = getTagNo();

        String tagNo = patientCacheModel.tagNo;

        if ((tagNo != null) && (tagNo.length() == 0)) {
            patientCacheModel.tagNo = null;
        }

        patientCacheModel.temperature = getTemperature();

        Date latestDate = getLatestDate();

        if (latestDate != null) {
            patientCacheModel.latestDate = latestDate.getTime();
        } else {
            patientCacheModel.latestDate = Long.MIN_VALUE;
        }

        patientCacheModel.temperatureIn8h = getTemperatureIn8h();

        Date highestDate = getHighestDate();

        if (highestDate != null) {
            patientCacheModel.highestDate = highestDate.getTime();
        } else {
            patientCacheModel.highestDate = Long.MIN_VALUE;
        }

        patientCacheModel.febrile = getFebrile();

        patientCacheModel.alarmLevel = getAlarmLevel();

        patientCacheModel.discharge = getDischarge();

        patientCacheModel.deleted = getDeleted();

        Date createDate = getCreateDate();

        if (createDate != null) {
            patientCacheModel.createDate = createDate.getTime();
        } else {
            patientCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            patientCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            patientCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return patientCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(45);

        sb.append("{patientId=");
        sb.append(getPatientId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", mrn=");
        sb.append(getMrn());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", locationId=");
        sb.append(getLocationId());
        sb.append(", bedId=");
        sb.append(getBedId());
        sb.append(", gender=");
        sb.append(getGender());
        sb.append(", birthday=");
        sb.append(getBirthday());
        sb.append(", minTemperature=");
        sb.append(getMinTemperature());
        sb.append(", maxTemperature=");
        sb.append(getMaxTemperature());
        sb.append(", tagNo=");
        sb.append(getTagNo());
        sb.append(", temperature=");
        sb.append(getTemperature());
        sb.append(", latestDate=");
        sb.append(getLatestDate());
        sb.append(", temperatureIn8h=");
        sb.append(getTemperatureIn8h());
        sb.append(", highestDate=");
        sb.append(getHighestDate());
        sb.append(", febrile=");
        sb.append(getFebrile());
        sb.append(", alarmLevel=");
        sb.append(getAlarmLevel());
        sb.append(", discharge=");
        sb.append(getDischarge());
        sb.append(", deleted=");
        sb.append(getDeleted());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(70);

        sb.append("<model><model-name>");
        sb.append("com.surwing.model.Patient");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>patientId</column-name><column-value><![CDATA[");
        sb.append(getPatientId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mrn</column-name><column-value><![CDATA[");
        sb.append(getMrn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>locationId</column-name><column-value><![CDATA[");
        sb.append(getLocationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bedId</column-name><column-value><![CDATA[");
        sb.append(getBedId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>gender</column-name><column-value><![CDATA[");
        sb.append(getGender());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>birthday</column-name><column-value><![CDATA[");
        sb.append(getBirthday());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>minTemperature</column-name><column-value><![CDATA[");
        sb.append(getMinTemperature());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>maxTemperature</column-name><column-value><![CDATA[");
        sb.append(getMaxTemperature());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tagNo</column-name><column-value><![CDATA[");
        sb.append(getTagNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>temperature</column-name><column-value><![CDATA[");
        sb.append(getTemperature());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>latestDate</column-name><column-value><![CDATA[");
        sb.append(getLatestDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>temperatureIn8h</column-name><column-value><![CDATA[");
        sb.append(getTemperatureIn8h());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>highestDate</column-name><column-value><![CDATA[");
        sb.append(getHighestDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>febrile</column-name><column-value><![CDATA[");
        sb.append(getFebrile());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>alarmLevel</column-name><column-value><![CDATA[");
        sb.append(getAlarmLevel());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discharge</column-name><column-value><![CDATA[");
        sb.append(getDischarge());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deleted</column-name><column-value><![CDATA[");
        sb.append(getDeleted());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
