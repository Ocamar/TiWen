package com.surwing.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.surwing.model.Location;
import com.surwing.model.LocationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Location service. Represents a row in the &quot;M_Location&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.surwing.model.LocationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocationImpl}.
 * </p>
 *
 * @author zhaiyz
 * @see LocationImpl
 * @see com.surwing.model.Location
 * @see com.surwing.model.LocationModel
 * @generated
 */
public class LocationModelImpl extends BaseModelImpl<Location>
    implements LocationModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a location model instance should use the {@link com.surwing.model.Location} interface instead.
     */
    public static final String TABLE_NAME = "M_Location";
    public static final Object[][] TABLE_COLUMNS = {
            { "locationId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "locationNo", Types.VARCHAR },
            { "locationName", Types.VARCHAR },
            { "esbEnabled", Types.BOOLEAN },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table M_Location (locationId LONG not null primary key,companyId LONG,groupId LONG,locationNo VARCHAR(75) null,locationName VARCHAR(75) null,esbEnabled BOOLEAN,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table M_Location";
    public static final String ORDER_BY_JPQL = " ORDER BY location.locationId DESC";
    public static final String ORDER_BY_SQL = " ORDER BY M_Location.locationId DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.surwing.model.Location"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.surwing.model.Location"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.surwing.model.Location"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long LOCATIONNO_COLUMN_BITMASK = 4L;
    public static long LOCATIONID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.surwing.model.Location"));
    private static ClassLoader _classLoader = Location.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Location.class
        };
    private long _locationId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private String _locationNo;
    private String _originalLocationNo;
    private String _locationName;
    private boolean _esbEnabled;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private Location _escapedModel;

    public LocationModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _locationId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setLocationId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _locationId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Location.class;
    }

    @Override
    public String getModelClassName() {
        return Location.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("locationId", getLocationId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("locationNo", getLocationNo());
        attributes.put("locationName", getLocationName());
        attributes.put("esbEnabled", getEsbEnabled());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long locationId = (Long) attributes.get("locationId");

        if (locationId != null) {
            setLocationId(locationId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        String locationNo = (String) attributes.get("locationNo");

        if (locationNo != null) {
            setLocationNo(locationNo);
        }

        String locationName = (String) attributes.get("locationName");

        if (locationName != null) {
            setLocationName(locationName);
        }

        Boolean esbEnabled = (Boolean) attributes.get("esbEnabled");

        if (esbEnabled != null) {
            setEsbEnabled(esbEnabled);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @Override
    public long getLocationId() {
        return _locationId;
    }

    @Override
    public void setLocationId(long locationId) {
        _columnBitmask = -1L;

        _locationId = locationId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public String getLocationNo() {
        if (_locationNo == null) {
            return StringPool.BLANK;
        } else {
            return _locationNo;
        }
    }

    @Override
    public void setLocationNo(String locationNo) {
        _columnBitmask |= LOCATIONNO_COLUMN_BITMASK;

        if (_originalLocationNo == null) {
            _originalLocationNo = _locationNo;
        }

        _locationNo = locationNo;
    }

    public String getOriginalLocationNo() {
        return GetterUtil.getString(_originalLocationNo);
    }

    @Override
    public String getLocationName() {
        if (_locationName == null) {
            return StringPool.BLANK;
        } else {
            return _locationName;
        }
    }

    @Override
    public void setLocationName(String locationName) {
        _locationName = locationName;
    }

    @Override
    public boolean getEsbEnabled() {
        return _esbEnabled;
    }

    @Override
    public boolean isEsbEnabled() {
        return _esbEnabled;
    }

    @Override
    public void setEsbEnabled(boolean esbEnabled) {
        _esbEnabled = esbEnabled;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Location.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Location toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Location) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LocationImpl locationImpl = new LocationImpl();

        locationImpl.setLocationId(getLocationId());
        locationImpl.setCompanyId(getCompanyId());
        locationImpl.setGroupId(getGroupId());
        locationImpl.setLocationNo(getLocationNo());
        locationImpl.setLocationName(getLocationName());
        locationImpl.setEsbEnabled(getEsbEnabled());
        locationImpl.setCreateDate(getCreateDate());
        locationImpl.setModifiedDate(getModifiedDate());

        locationImpl.resetOriginalValues();

        return locationImpl;
    }

    @Override
    public int compareTo(Location location) {
        int value = 0;

        if (getLocationId() < location.getLocationId()) {
            value = -1;
        } else if (getLocationId() > location.getLocationId()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Location)) {
            return false;
        }

        Location location = (Location) obj;

        long primaryKey = location.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LocationModelImpl locationModelImpl = this;

        locationModelImpl._originalCompanyId = locationModelImpl._companyId;

        locationModelImpl._setOriginalCompanyId = false;

        locationModelImpl._originalGroupId = locationModelImpl._groupId;

        locationModelImpl._setOriginalGroupId = false;

        locationModelImpl._originalLocationNo = locationModelImpl._locationNo;

        locationModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Location> toCacheModel() {
        LocationCacheModel locationCacheModel = new LocationCacheModel();

        locationCacheModel.locationId = getLocationId();

        locationCacheModel.companyId = getCompanyId();

        locationCacheModel.groupId = getGroupId();

        locationCacheModel.locationNo = getLocationNo();

        String locationNo = locationCacheModel.locationNo;

        if ((locationNo != null) && (locationNo.length() == 0)) {
            locationCacheModel.locationNo = null;
        }

        locationCacheModel.locationName = getLocationName();

        String locationName = locationCacheModel.locationName;

        if ((locationName != null) && (locationName.length() == 0)) {
            locationCacheModel.locationName = null;
        }

        locationCacheModel.esbEnabled = getEsbEnabled();

        Date createDate = getCreateDate();

        if (createDate != null) {
            locationCacheModel.createDate = createDate.getTime();
        } else {
            locationCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            locationCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            locationCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return locationCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{locationId=");
        sb.append(getLocationId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", locationNo=");
        sb.append(getLocationNo());
        sb.append(", locationName=");
        sb.append(getLocationName());
        sb.append(", esbEnabled=");
        sb.append(getEsbEnabled());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.surwing.model.Location");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>locationId</column-name><column-value><![CDATA[");
        sb.append(getLocationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>locationNo</column-name><column-value><![CDATA[");
        sb.append(getLocationNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>locationName</column-name><column-value><![CDATA[");
        sb.append(getLocationName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>esbEnabled</column-name><column-value><![CDATA[");
        sb.append(getEsbEnabled());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
